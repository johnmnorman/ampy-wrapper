#!/usr/bin/python3

import subprocess
import datetime
import os

proc = ["ampy", "--port", "/dev/ttyACM0"]

help = {
        "cat": ["cat FILENAME", "Retrieve the contents of a text file on your device and display it in your shell using `less`."],
        "pull": ["pull FILENAME [NEW_FILENAME]", "Copy a file from your device to your computer. Optionally, copy under a NEW_FILENAME."],
        "push": ["push LOCAL_FILE [NEW_FILENAME]", "Copy a file from your computer to your device. Optionally, copy under a NEW_FILENAME."],
        "ls": ["ls [SUBDIRECTORY]", "Display contents of the root directory or a subdirectory on your device."],
        "rm": ["rm FILENAME", "Remove a file from your device. To remove a directory, use rmdir."],
        "rmdir": ["rmdir FOLDERNAME", "Remove a folder from your device. Also removes anything inside the folder, including subdirectories."],
        "mkdir": ["mkdir FOLDERNAME", "Creates a new folder on your device."],
        "repl": ["repl", "Launch tio as a subprocess to interact with your device."],
        "dev": ["dev [/path/to/device]", "Display what port this program is trying to connect to, or change the port if specified."],
        "reset": ["reset", "Sends a soft reboot signal to your device."],
        "run": ["run LOCAL_FILE", "Executes the contents of the LOCAL_FILE on your device."],
        "quit": ["quit", "Quits the program. You can also type `exit` or just `q`."],
        "help": ["help [COMMAND]", "Get help on a particular command."]
        }

class Program:
    def __init__(self, port="/dev/ttyACM0", editor="nvim"):
        self.proc = ["ampy", "--port", port]
        self.editor = editor
        self.history = []
        self.cmd = None
        self.params = None
        self.result = None
        self.repeat = False

    def repl(self):
        '''Takes input, parses it, calls appropriate functions, loops.'''
        if self.repeat == True:
            self.cmd, self.params = self.history[-1]
            self.repeat = False
        else:
            i = input("ampy >>> ")
            tokens = i.split(' ')
            self.cmd = tokens[0]
            self.params = tokens[1:]

        c = self.cmd
        p = self.params
        if c == "help":
            if len(p) == 1:
                print_help(p[0])
            else:
                print_help("invalid")
        elif c == "ls":
            print("Querying device...")
            if len(p) == 1:
                self.result = self.call_ampy(["ls", p[0]])
            elif len(p) > 1:
                print_help("ls")
            else:
                self.result = self.call_ampy(["ls"])
        elif c == "cat":
            if len(p) == 1:
                print("Querying device...")
                self.result = subprocess.run(self.proc + ["get", p[0]],
                                             stdout=subprocess.PIPE,
                                             stderr=subprocess.PIPE,
                                             text=True,
                                             check=True)
                more = subprocess.run(["less"], input=self.result.stdout, text=True)
            else:
                print_help("cat")
        elif c == "pull":
            if len(p) == 1 or len(p) == 2:
                fin = fout = p[0]
                if len(p) == 2:
                    fout = p[1]
                print("Querying device...")
                self.result = self.call_ampy(["get", p[0]],
                                         pipe_stdout=True)
                try:
                    with open(fout, 'x') as f:
                        f.write(self.result.stdout)
                        print("Saved {} to computer as {}...".format(fin, fout))
                except FileExistsError:
                    print(f"File not written: {fout} already exists on computer.")
            else:
                print_help("push")
        elif c == "push":
            if len(p):
                file = p[0]
                rename = p[-1]
                print("Querying device...")
                result = subprocess.run(proc + ["put", file, rename],
                                    check=True,
                                    text=True,
                                    stderr=subprocess.PIPE)
                print("Uploaded {} to device as {} ...".format(file, rename))
            else:
                print_help("push")
        elif c == "reset":
            print("Sending a soft reset signal to device...")
            self.result = self.call_ampy(["reset"])
            print("Done.")
        elif c == "dev":
            if len(p) == 0:
                print(f"Pico port:  {self.proc[-1]}")
            elif len(p) == 1:
                self.proc = ["ampy", "--port", p[0]]
                print(f"Changed port to: {self.proc[-1]}")
            else:
                print_help("dev")
        elif c == "mkdir":
            if len(p) == 1:
                dir = p[0]
                print("Querying device...")
                self.result = self.call_ampy(["mkdir", dir])
                print("Directory created.")
            else:
                print_help("mkdir")
        elif c == "rm":
            if len(p) == 1:
                file = p[0]
                print("Querying device...")
                self.result = self.call_ampy(["rm", file])
                print("File deleted.")
            else:
                print_help("rm")
        elif c == "rmdir":
            if len(p) == 1:
                print("WARNING: This will delete the directory and everything in it!")
                warn = input("Continue? (y/N) >> ")
                if warn in ["y", "yes", "Y", "YES"]:
                    file = p[0]
                    print("Querying device...")
                    self.result = self.call_ampy(["rmdir", file])
                    print("Directory deleted.")
            else:
                print_help("rmdir")
        elif c == "repl":
            print("Connecting interactively to device. (Requires tio)")
            self.result = subprocess.run(["tio", proc[-1]],
                                    check=True,
                                    stderr=subprocess.PIPE)
            print("Exiting REPL mode... ")
        elif c == "run":
            if len(p) == 1:
                localfile = p[0]
                self.result = self.run(localfile)
                
        elif c == "lsl":
            d = os.getcwd()
            if len(p) > 0:
                subd = p[0]
                if subd[0] == "/":
                    d = subd
                elif subd[0:2] == "./":
                    d = d + subd[1:]
                else:
                    d = d + "/" + subd

            if os.path.isdir(d):
                print(f"{d}: ")

                for dir in os.listdir(d):
                    prefix = "  - "
                    if os.path.isdir(d + '/' + dir):
                        prefix = "  + "
                    print(prefix + str(dir))
            else:
                print(f"Invalid directory `{d}`!")
            #TODO: help
        elif c == "cdl":
            if len(p) > 1:
                    #TODO: help
                    pass
            else:
                d = os.environ['HOME']

                if len(p) == 1 and p[0] != "~":
                    d = os.getcwd() + "/" + p[0]

                if os.path.isdir(d):
                    os.chdir(d)
                    print(f"Working directory now `{d}`.")
        elif c == "pwdl":
            if len(p) == 0:
                d = os.getcwd()
                print(d)
                #TODO help

        elif c == "!":
            self.repeat = True
        else:
            print("Command not recognized. Command must be one of these:")
            print('     ' + ', '.join(sorted(help.keys())))

        if self.repeat == False:
            self.history.append((self.cmd, self.params))

    def call_ampy(self, param_list: list, pipe_stdout=False):
        if pipe_stdout:
            return subprocess.run(self.proc + param_list,
                                  text=True,
                                  check=True,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
        else:
            return subprocess.run(self.proc + param_list,
                                  text=True,
                                  check=True,
                                  stderr=subprocess.PIPE)

    def run(self, localfile, verbose=True):
        if verbose: print("Checking file ...")
        try:
            f = open(localfile, "r")
            f.close()
            print("File exists.")
            print("Querying device...")
            result = subprocess.run(self.proc + ["run", localfile],
                                    text=True,
                                    check=True,
                                    stderr=subprocess.PIPE)

            if verbose: print("Script executed successfully.")
            return result
        except FileNotFoundError:
            if verbose: print("File not found!")


def print_help(cmd):
    if cmd in help.keys():
        u, t = help[cmd]
        print(t)
        print(f"USAGE:    {u}")
    else:
        cmds = ', '.join(sorted(help.keys()))
        print(f"Valid commands: {cmds}")
        print(f"USAGE:    help [COMMAND]")
        print()
        print("Brackets indicate that the bracketed part is optional and may be omitted.")


print("Welcome to John's Ampy Wrapper! Type help for more info.")
print(f"Polling {proc[-1]} ...")

try:
    r = subprocess.run(proc + ["ls"],
                       stderr=subprocess.PIPE,
                       text=True,
                       check=True)
    print(f"Connected to device!")
except subprocess.CalledProcessError as e:
    if "failed to access" in e.stderr:
        print()
        print("Device not found! Use dev /path/to/device to change port.")

if __name__ == "__main__":
    prog = Program()
    while True:
        try:
            prog.repl()
        except subprocess.CalledProcessError as e:
            if "No such file" in e.stderr:
                print(f"File not found!" )
            elif "rmdir" in e.stderr:
                print("Directory not found or not a directory!")
            elif "value for 'LOCAL'" in e.stderr:
                print("Can't find file {} on local disk!".format(file))
            elif "failed to access" in e.stderr:
                print(f"Device not found at {proc[-1]}!")
            else:
                with open(".pico.log", 'a') as f:
                    f.write("### BEGIN ENTRY ###\n")
                    f.write("Generated on: " + str(datetime.datetime.now()))
                    f.write("\n")
                    f.write(str(e.stderr))
                    f.write("### END ENTRY ###\n\n\n")
                print("Error occurred. Log entry created. The error may have originated from a script on your device.")
                view = input("View error message? (Y/n) >> ")
                if view not in ["n", "N", "no", "No", "NO"]:
                    more = subprocess.run(["less"], input=e.stderr, text=True)
        except EOFError:
            exit("Got kill signal, exiting...")
        except KeyboardInterrupt:
            print()
            continue
